validators:      
  validateDate:
    class:           sfCallbackValidator
    param:
      callback:      [Validate, validateDate]
      invalid_error: form.error.invalidDate
  validateEventDate:
    class:           sfCallbackValidator
    param:
      callback:      [EventPeer, validateEventDate]
      invalid_error: form.error.expiredDate
      
fields:
       
  rankingId:
    required:
      msg:       form.error.requiredField
       
  eventName:
    required:
      msg:       form.error.requiredField
    sfCallbackValidator:
      callback:      [EventPeer, uniqueEventName]
      invalid_error: form.error.takenEventName
       
  rankingPlaceId:
    required:
      msg:       form.error.requiredField
       
  eventDate:
    required:
      msg:       form.error.requiredField
    validateDate:
    validateEventDate:
       
  startTime:
    required:
      msg:       form.error.requiredField
    sfCallbackValidator:
      callback:      [Validate, validateTime]
      invalid_error: form.error.invalidTime
       
  paidPlaces:
    required:
      msg:       form.error.requiredField
    sfNumberValidator:
      min: 0
      max: 9
      min_error: form.error.greaterEqual0
      max_error: form.error.lessEqual9
      nan_error: form.error.invalidNumber
       
  buyin:
    required:
      msg:       form.error.requiredField
    sfNumberValidator:
      min:       0
      min_error: form.error.greaterEqual0
      nan_error: form.error.greaterEqual0
       
  comments:
    sfStringValidator:
      max:       140
      max_error: form.error.max140
       
  prizePot:
    required:
      msg:       form.error.requiredField
    sfNumberValidator:
      min:       0
      min_error: form.error.greaterEqual0
      nan_error: form.error.greaterEqual0
    sfCallbackValidator:
      callback:      [EventPeer, validatePrizeShare]
      invalid_error: nullError